name: Build & Deploy FHIR IG

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Node (for SUSHI)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install SUSHI
        run: npm install -g fsh-sushi@latest

      - name: Cache FHIR packages and input-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.fhir/packages
            input-cache
          key: ${{ runner.os }}-igcache-${{ hashFiles('sushi-config.yaml', 'ig.ini', 'input/fsh/**/*.fsh', 'input/includes/**/*.html', 'input/pagecontent/**/*.md') }}
          restore-keys: |
            ${{ runner.os }}-igcache-

      - name: Run SUSHI
        run: sushi . --out .

      - name: Download IG Publisher (if not cached)
        run: |
          mkdir -p input-cache
          if [ ! -f input-cache/publisher.jar ]; then
            curl -L -o input-cache/publisher.jar https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar
          fi

      # Ruby/Jekyll so Publisher can render pages (safe default)
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
      - name: Install Jekyll and plugins
        run: |
          gem install bundler
          gem install jekyll jekyll-remote-theme webrick kramdown rouge json

      - name: Build IG (Publisher)
        run: |
          java -Xmx4G -Dfile.encoding=UTF-8 -jar input-cache/publisher.jar -ig ig.ini

      # Create a PDF of key pages (index is usually enough)
      - name: Install wkhtmltopdf
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf
      - name: Generate PDF
        run: |
          wkhtmltopdf --enable-local-file-access output/index.html output/MYDRG-IG.pdf || true

      # Save the PDF as a workflow artifact (for easy download from Actions)
      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: MYDRG-IG-pdf
          path: output/MYDRG-IG.pdf
          if-no-files-found: ignore

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: output

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
